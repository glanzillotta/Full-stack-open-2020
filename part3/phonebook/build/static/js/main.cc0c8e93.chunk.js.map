{"version":3,"sources":["services/person.js","components/Form.js","components/Filter.js","components/Persons.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","put","PersonForm","props","newName","setNewName","newNumber","setNewNumber","persons","setPersons","setMessage","name","number","onSubmit","event","preventDefault","type","onChange","target","value","onClick","find","person","window","confirm","personService","catch","setTimeout","Filter","setSearch","Persons","search","handleClick","filter","printPerson","map","toLowerCase","Notification","message","error","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","App","useState","useEffect","initialPers","Form","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.cc0c8e93.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst add = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nconst remove = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, add, remove, update };\n","import React from \"react\";\nimport personService from \"../services/person\";\n\nconst PersonForm = (props) => {\n  const {\n    newName,\n    setNewName,\n    newNumber,\n    setNewNumber,\n    persons,\n    setPersons,\n    setMessage,\n  } = props;\n  const newObject = { name: newName, number: newNumber };\n\n  const handleForm = (event) => {\n    event.preventDefault();\n  };\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value);\n  };\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value);\n  };\n\n  const handleAddName = () => {\n    let id = null;\n    if (\n      persons.find((person) =>\n        person.name === newName ? (id = person.id) : null\n      )\n    ) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, replace the old number with a new one?`\n        )\n      )\n        personService\n          .update(id, newObject)\n          .catch(\n            setMessage(\n              `Information of ${newObject.name} has been removed from the server`,\n              true\n            )\n          );\n      setMessage(`Number of ${newObject.name} modified`, false);\n      setTimeout(() => setMessage(null), 5000);\n      setPersons([...persons, newObject]);\n    } else {\n      personService.add(newObject);\n      setMessage(`Added ${newObject.name}`);\n      setTimeout(() => setMessage(null), 5000);\n      setPersons([...persons, newObject]);\n    }\n  };\n  return (\n    <form onSubmit={handleForm}>\n      <div>\n        name: <input type=\"text\" onChange={handleNewName} />\n      </div>\n      <div>\n        number: <input type=\"text\" onChange={handleNewNumber} />\n      </div>\n      <div>\n        <input type=\"submit\" value=\"add\" onClick={handleAddName} />\n      </div>\n    </form>\n  );\n};\n\nexport default PersonForm;\n","import React from \"react\";\n\nconst Filter = (props) => {\n  const { setSearch } = props;\n\n  const handleSearch = (event) => {\n    setSearch(event.target.value);\n  };\n  return (\n    <div>\n      filter shown with <input type=\"text\" onChange={handleSearch} />\n    </div>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport personService from \"../services/person\";\n\nconst Persons = (props) => {\n  const { persons, search, setPersons } = props;\n  const handleClick = (event) => {\n    if (window.confirm(`Delete ${persons[event.target.id - 1].name}`)) {\n      personService.remove(event.target.id);\n      setPersons(persons.filter((person) => person.id !== event.target.id));\n    }\n  };\n\n  const printPerson = (person) => {\n    return (\n      <div>\n        {person.name} {person.number}{\" \"}\n        <input\n          id={person.id}\n          type=\"button\"\n          value=\"delete\"\n          onClick={handleClick}\n        />\n      </div>\n    );\n  };\n  return search === \"\"\n    ? persons.map(printPerson)\n    : persons\n        .filter((person) => person.name.toLowerCase() === search.toLowerCase())\n        .map(printPerson);\n};\n\nexport default Persons;\n","import React from \"react\";\n\nconst Notification = ({ message, error }) => {\n  const notificationStyle = {\n    color: \"darkgreen\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  };\n  const errorStyle = {\n    color: \"darkred\",\n    background: \"lightgrey\",\n    fontSize: 20,\n    borderStyle: \"solid\",\n    borderRadius: 5,\n    padding: 10,\n    marginBottom: 10,\n  };\n\n  if (message === null) {\n    return null;\n  } else if (error) return <div style={errorStyle}>{message}</div>;\n  else return <div style={notificationStyle}>{message}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport Form from \"./components/Form\";\nimport Filter from \"./components/Filter\";\nimport Persons from \"./components/Persons\";\nimport personService from \"./services/person\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [search, setSearch] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((initialPers) => setPersons(initialPers));\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter setSearch={setSearch} />\n      <h2>Numbers</h2>\n      <Form\n        persons={persons}\n        setMessage={setMessage}\n        setPersons={setPersons}\n        newNumber={newNumber}\n        setNewNumber={setNewNumber}\n        newName={newName}\n        setNewName={setNewName}\n      />\n      <Persons persons={persons} setPersons={setPersons} search={search} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}